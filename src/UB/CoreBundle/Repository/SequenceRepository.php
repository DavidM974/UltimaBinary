<?php

namespace UB\CoreBundle\Repository;

use \UB\CoreBundle\Entity\Sequence;
/**
 * SequenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SequenceRepository extends \Doctrine\ORM\EntityRepository
{
    // Récupérer la dernière séquence ouverte
    public function getLastOpenSequence() {
        $sequence =  $this->findOneBy(
            array ('state'=>'OPEN'),
            array ('timeStart'=>'ASC', 'length' => 'desc')
            );
        return $sequence;

    }
    // todo filtrer pas de trade en cours
    public function getOpenSequence() {
        $sequences =  $this->findBy(
            array ('state'=>'OPEN'),
            array ('timeStart'=>'ASC', 'length' => 'desc')
            );
        return $sequences;

    }
    
    public function getOpenSequenceNotTrading($idCategSignal = NULL, $martinG = NULL) {
        $subqb = $this->createQueryBuilder('s');
        $subQuery = $subqb->select('s.id')
                ->innerJoin('s.trades', 'tr')
                ->where('tr.state = :state    ')
                ->setParameter('state', 'TRADE')
                ->getQuery()
                ->getArrayResult()
        ;
        $qb = $this->createQueryBuilder('s');
        if (empty($subQuery)) {
            $subQuery = array(0);
        }
        $qb
                ->select('s')
                ->where($qb->expr()->notIn('s.id', ':subQuery'))
                ->setParameter('subQuery', $subQuery)
                ->andWhere('s.state = :state')
                ->setParameter('state', 'OPEN');
        if ($idCategSignal == 5) {
            $qb->andWhere('s.length <= :size')
                ->setParameter('size',($martinG -2));
        }
               $query = $qb->getQuery();
        return $query->getResult();
    }

    public function isSequenceOpen() {
        $sequences = $this->getOpenSequence();
        if (empty($sequences)) {
            return false;
        }
        return TRUE;
    }

}
