<?php

namespace UB\CoreBundle\Repository;

/**
 * TradeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TradeRepository extends \Doctrine\ORM\EntityRepository
{
    // créer une requete qui récupére la plus grande mise du jour
    // créer une fonction qui retourne des statr sur un nombre de trade
    
    //
    public function getNewTrades() {
        
        $listTrades = $this->findBy(array ('state'=>'WAIT'));
        return $listTrades;
    }
    
        // Récupérer la dernière séquence ouverte
    public function getTradeForSequence($sequence) {
        $trades =  $this->findBy(
            array ('sequence'=> $sequence),
            array ('signalTime'=>'ASC')
            );
        return $trades;

    }
    public function getUndoneTrade($sequence) {
         $qb = $this->createQueryBuilder('tr');
 
        $result = $qb->select('tr')
            ->Where('tr.sequenceState <> :state')
            ->setParameter('state', \UB\CoreBundle\Entity\Trade::SEQSTATEDONE)
            ->andWhere('tr.sequence = :seq')
            ->setParameter('seq', $sequence)
            ->addOrderBy('tr.signalTime', 'ASC')
            ->getQuery()
            ->getResult(); 
        return $result;
    }    
    
    public function getSubQuerySequenceTrading() {
         $subqueryBuilder = $this->createQueryBuilder('tr');
 
        $subquery = $subqueryBuilder->select('tr.sequence')
            ->Where('tr.state <> :state')
            ->setParameter('state', \UB\CoreBundle\Entity\Trade::STATETRADE)
            ->distinct('tr.sequence'); 
        return $subquery;
    }
    
           public function isAlreadyTradeInSameMinute(\UB\CoreBundle\Entity\TradeSignal $signal) {          
        $qb = $this->createQueryBuilder('tr');
        $res = $qb->select('tr')
                ->Where('YEAR(tr.signalTime) = YEAR(:signalTimeSig)')
                ->andWhere('MONTH(tr.signalTime) = MONTH(:signalTimeSig)')
                ->andWhere('DAY(tr.signalTime) = DAY(:signalTimeSig)')
                ->andWhere('HOUR(tr.signalTime) = HOUR(:signalTimeSig)')
                ->andWhere('MINUTE(tr.signalTime) = MINUTE(:signalTimeSig)')
                ->setParameter('signalTimeSig', $signal->getStartTime())
                ->andWhere('tr.symbole = :SymboleSig')
                ->setParameter('SymboleSig', $signal->getSymbole())
                ->andWhere('tr.contractType = :contractTypeSig')
                ->setParameter('contractTypeSig', $signal->getContractType())
                ->getQuery()
                ->getResult();

        if (empty($res)) {
            return false;
        } else {
            return true;
        }
    }
}
